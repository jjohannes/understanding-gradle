plugins {
    id("java")
}

group = "org.example.my-app"
version = "0.1"

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

tasks.named("test") {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.3")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

dependencies.constraints {
    implementation("org.apache.commons:commons-lang3:3.6!!") // Remove !! (strict version) and this will be upgraded
    implementation("org.apache.commons:commons-text:1.5")
}

def appRuntimeClasspath = configurations.create("applicationRuntimeClasspath") {
    canBeResolved = true
    canBeConsumed = false
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
    }
}
dependencies {
    applicationRuntimeClasspath("org.example.my-app:app")
}
configurations {
    compileClasspath.shouldResolveConsistentlyWith(appRuntimeClasspath)
    runtimeClasspath.shouldResolveConsistentlyWith(appRuntimeClasspath)
    testCompileClasspath.shouldResolveConsistentlyWith(appRuntimeClasspath)
    testRuntimeClasspath.shouldResolveConsistentlyWith(appRuntimeClasspath)
}
